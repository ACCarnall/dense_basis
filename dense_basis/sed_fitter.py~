

def load_pregrid_sednorm(fname):
    # free SED normalization for easy mass and SFR fits
    
    cat = sio.loadmat(fname)
    sfh_tuples = cat['rand_sfh_tuples']
    Av = cat['rand_Av'].ravel()
    Z = cat['rand_Z'].ravel()
    z = cat['rand_z'].ravel()
    seds = cat['rand_seds']
    
    for i in range(seds.shape[1]):
        norm_fac = np.amax(seds[0:,i])
        seds[0:,i] = seds[0:,i]/norm_fac
        sfh_tuples[0,i] = sfh_tuples[0,i] - np.log10(norm_fac)
        sfh_tuples[1,i] = sfh_tuples[1,i] - np.log10(norm_fac)    
        
    return sfh_tuples, Z, Av, z, seds

def fit_sed_pregrid(sed, sed_err, pg_theta, make_posterior_plots = False, truths = [np.nan], make_sed_plot = False):
    
    pg_sfhs, pg_Z, pg_Av, pg_z, pg_seds = pg_theta
    
    norm_fac = np.amax(sed)
    sed_normed = sed.reshape(-1,1)/norm_fac
    sed_err_normed = sed_err.reshape(-1,1)/norm_fac
    
    chi2 = np.mean((pg_seds - sed_normed)**2 / (sed_err_normed)**2, 0)
    
    if make_sed_plot == True:
        plt.plot(sed_normed)
        plt.plot(sed_normed+sed_err_normed,'k--')
        plt.plot(sed_normed-sed_err_normed,'k--')
        plt.plot(pg_seds[0:,np.argmin(chi2)])
        plt.show()
        
    if make_posterior_plots == True:
        plt.figure(figsize=(27,4))
        plt.subplot(1,5,1);plt.xlabel('log Stellar Mass')
        plt.hist(pg_sfhs[0,0:]+np.log10(norm_fac),10, weights=10**(-chi2/2), normed=True)
        plt.subplot(1,5,2);plt.xlabel('log SFR')
        plt.hist(pg_sfhs[1,0:]+np.log10(norm_fac),10, weights=10**(-chi2/2), normed=True)
        plt.subplot(1,5,3);plt.xlabel(r't$_{50}$')
        plt.hist(pg_sfhs[3,0:],10, weights=10**(-chi2/2), normed=True)
        plt.subplot(1,5,4);plt.xlabel(r'A$_v$')
        plt.hist(pg_Av,10, weights=10**(-chi2/2), normed=True)
        plt.subplot(1,5,5);plt.xlabel(r'log Z/Z$_{\odot}$')
        plt.hist(pg_Z,10, weights=10**(-chi2/2), normed=True)
        if len(truths) > 1:
            plt.subplot(1,5,1);tempy = plt.ylim();plt.plot([truths[0],truths[0]],tempy,'k--', lw=3)
            plt.subplot(1,5,2);tempy = plt.ylim();plt.plot([truths[1],truths[1]],tempy,'k--', lw=3)
            plt.subplot(1,5,3);tempy = plt.ylim();plt.plot([truths[2],truths[2]],tempy,'k--', lw=3)
            plt.subplot(1,5,4);tempy = plt.ylim();plt.plot([truths[3],truths[3]],tempy,'k--', lw=3)
            plt.subplot(1,5,5);tempy = plt.ylim();plt.plot([truths[4],truths[4]],tempy,'k--', lw=3)
        plt.show()
        
    return chi2
